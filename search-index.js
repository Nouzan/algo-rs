var searchIndex = JSON.parse('{\
"my_algo":{"doc":"","i":[[0,"ch1","my_algo","一些简单算法: 斐波那契数列算法、幂算法.",null,null],[5,"power","my_algo::ch1","幂算法. 通过平方求幂.",null,[[["mul",8],["one",8],["clone",8]],[["mul",8],["one",8],["clone",8]]]],[5,"fib","","计算第n个斐波那契数(`O(lgn)`版本)",null,[[]]],[5,"fib_recurrence","","计算第n个斐波那契数(递归版本)",null,[[]]],[5,"fib_linear","","计算第n个斐波那契数(非递归版本)",null,[[]]],[0,"ch2","my_algo","实现了线性表相关算法.",null,null],[0,"integer","my_algo::ch2","",null,null],[8,"ISizeListExt","my_algo::ch2::integer","",null,null],[11,"smallest_missing_positive_integer","","计算最小的未出现的正整数. ([-5, 3, 2, 3] => 1; [1, 2, 3] => 4)",0,[[]]],[0,"linked_list","my_algo::ch2","",null,null],[0,"cdll","my_algo::ch2::linked_list","",null,null],[3,"LinkedList","my_algo::ch2::linked_list::cdll","循环双链表.",null,null],[0,"algos","","",null,null],[0,"cursor","","",null,null],[3,"Cursor","my_algo::ch2::linked_list::cdll::cursor","只读游标. 指向双循环链表的一个结点. 特别地, 我们形式地插入一个幽灵结点, 作为首结点的前驱、尾结点的后继.…",null,null],[3,"CursorMut","","可变游标. 指向双循环链表的一个结点. 特别地, 我们形式地插入一个幽灵结点, 作为首结点的前驱、尾结点的后继.…",null,null],[11,"new","","使用一个链表的引用构造一个新的`Cursor`.",1,[[["linkedlist",3]]]],[11,"move_prev","","`Cursor`向左移动, 指向它的前驱.",1,[[]]],[11,"new","","使用链表的可变引用创建一个新的`CursorMut`.",2,[[["linkedlist",3]]]],[11,"move_prev","","`Cursor`向左移动, 指向它的前驱.",2,[[]]],[0,"iter","my_algo::ch2::linked_list::cdll","",null,null],[3,"Iter","my_algo::ch2::linked_list::cdll::iter","",null,null],[3,"IterMut","","",null,null],[11,"new","my_algo::ch2::linked_list::cdll","创建一个空的链表.",3,[[]]],[11,"push_back","","把新值作为新的尾结点插入.",3,[[]]],[11,"pop_back","","弹出尾结点.",3,[[],["option",4]]],[11,"cursor_back","","冻结链表, 创建指向尾结点(若有)的只读游标.",3,[[],["cursor",3]]],[11,"cursor_back_mut","","创建指向尾结点(若有)的可变游标.",3,[[],["cursormut",3]]],[11,"iter","","获得一个从首结点到尾结点的只读迭代器.",3,[[],["iter",3]]],[11,"iter_mut","","获得一个从首结点到尾结点的可变迭代器.",3,[[],["itermut",3]]],[0,"shll","my_algo::ch2::linked_list","",null,null],[3,"ItemNode","my_algo::ch2::linked_list::shll","普通结点.",null,null],[3,"LinkedList","","带头结点的单链表.",null,null],[3,"IterMut","","单链表可变迭代器.",null,null],[3,"Iter","","单链表只读迭代器.",null,null],[3,"Cursor","","只读单链表游标. 该结构保存着的是“当前”结点的直接前驱(`prev`).",null,null],[3,"CursorMut","","可变单链表游标. 该结构保存着的是“当前”结点的直接前驱(`prev`).",null,null],[4,"Node","","单链表结点.",null,null],[13,"Item","","",4,null],[13,"Head","","",4,null],[0,"utils","","",null,null],[5,"split_odd","my_algo::ch2::linked_list::shll::utils","把链表分解为奇链和偶链.(分别包含原来链表中的奇数位置结点和偶数位置结点)",null,[[["linkedlist",3]],["linkedlist",3]]],[5,"merge","","把两个递增排列的有序单链表合并为一个递增排列的有序单链表.",null,[[["partialord",8],["linkedlist",3]],[["partialord",8],["linkedlist",3]]]],[5,"common","","生成一个单链表, 它包含两个递增有序的单链表的公共元素.",null,[[["linkedlist",3]],[["partialord",8],["clone",8],["linkedlist",3]]]],[5,"intersect","","求两个链表元素集合的交集.",null,[[["linkedlist",3],["linkedlist",3]]]],[5,"dedup_by_abs","","去除绝对值重复的元素结点.",null,[[["linkedlist",3]]]],[11,"iter","my_algo::ch2::linked_list::shll","返回一个从首结点开始的只读迭代器.",5,[[],["iter",3]]],[11,"iter_mut","","返回一个从首结点开始的可变迭代器.",5,[[],["itermut",3]]],[0,"singly","my_algo::ch2::linked_list","",null,null],[8,"SinglyLinkedListExt","my_algo::ch2::linked_list::singly","",null,null],[11,"reverse","","就地逆置.",6,[[]]],[11,"last","","获取倒数第n个元素. 若表不够长, 则返回`None`.",6,[[],["option",4]]],[11,"delete_all","","删除所有值等于`x`的元素.",6,[[]]],[11,"dedup","","去除连续重复的元素.",6,[[]]],[11,"pop_min","","删除第一次出现的最小值结点. 若表空, 则返回`None`.",6,[[],["option",4]]],[11,"partition","","快速排序中的helper.",6,[[]]],[11,"sort","","(按递增序)排序.",6,[[]]],[11,"delete_between","","删除内容在[a, b)之间的结点.",6,[[]]],[11,"find","","串匹配. 若匹配, 则返回最近匹配的位置; 否则返回`None`.",6,[[],["option",4]]],[0,"sll","my_algo::ch2::linked_list","",null,null],[3,"Node","my_algo::ch2::linked_list::sll","单链表结点.",null,null],[3,"LinkedList","","单链表.",null,null],[3,"CursorMut","","单链表游标.",null,null],[11,"new","","",7,[[],["box",3]]],[11,"node_mut","","",8,[[["option",4]],[["node",3],["option",4]]]],[11,"cursor_mut","","",8,[[],["cursormut",3]]],[11,"push_front","","",8,[[]]],[11,"peek","","",9,[[],["option",4]]],[11,"peek_next","","",9,[[],["option",4]]],[11,"as_mut","","",9,[[],[["node",3],["option",4]]]],[11,"into_inner","","",9,[[],[["node",3],["option",4]]]],[11,"delete_all","","删除所有值等于`x`的元素(使用`Link`).",8,[[]]],[8,"LinearCursor","my_algo::ch2::linked_list","只读线性游标特质, 用于实现只读的循位置访问.",null,null],[10,"move_next","","游标向右移动, 指向它的后继.",10,[[]]],[10,"peek","","获得所指结点的元素的只读引用. 表空或指向幽灵结点时返回`None`.",10,[[],["option",4]]],[10,"is_front_or_empty","","表空或所指结点为首结点时返回`true`. 特别地, 指向“幽灵”结点时返回`false`.",10,[[]]],[10,"is_empty","","表为空时返回`true`. 特别地, 若指向“幽灵”结点则返回`false`.",10,[[]]],[10,"is_ghost","","是否为“幽灵”结点.",10,[[]]],[10,"index","","所指结点相对与首结点的偏移. 若表空则返回`None`.",10,[[],["option",4]]],[10,"into_ref","","消耗游标, 转换为内容的只读引用.",10,[[],["option",4]]],[8,"LinearCursorMut","","可变游标特质, 用于实现可变的循位置访问.",null,null],[16,"Cursor","","",11,null],[10,"as_cursor","","转换为一个只读游标.",11,[[]]],[11,"as_cursor_forward","","转换为一个前进了`n`步的只读游标.",11,[[]]],[10,"peek_mut","","获取所指结点内容的可变引用. 若表空则返回`None`.",11,[[],["option",4]]],[10,"insert_before","","在当前结点前插入新值, 游标所指结点不变, 插入成功时返回`None`. 若表空, 则新值将作为首结点插入,…",11,[[],["option",4]]],[10,"insert_after","","在当前结点后插入新值, 游标所指结点不变, 插入成功时返回`None`. 若表空, 则新值将作为首结点插入,…",11,[[],["option",4]]],[10,"insert_before_as_current","","在当前结点前插入新值, 游标指向新插入的结点, 插入成功时返回`None`. 若位置不合法, 则返回被插入的值.",11,[[],["option",4]]],[10,"insert_after_as_current","","在当前结点后插入新值, 游标指向新插入的结点, 插入成功时返回`None`. 若位置不合法, 则返回被插入的值.",11,[[],["option",4]]],[10,"remove_current","","删除当前所指结点并返回其内容, 游标改为指向它的后继. 若表空则返回`None`.",11,[[],["option",4]]],[8,"SinglyLinkedList","","单链表特质.",null,null],[16,"Cursor","","",12,null],[16,"CursorMut","","",12,null],[10,"is_empty","","链表是否为空.",12,[[]]],[11,"len","","获取表的长度.",12,[[]]],[10,"push_front","","把新值作为新的首结点插入.",12,[[]]],[10,"pop_front","","弹出首结点, 首结点的直接后继(若有)将成为新的首结点.",12,[[],["option",4]]],[10,"cursor_front","","冻结链表, 创建指向首结点(若有)的只读游标.",12,[[]]],[10,"cursor_front_mut","","创建指向首结点(若有)的可变游标.",12,[[]]],[10,"append","","连接两个链表. 操作后`rhs`将会变为空表.",12,[[]]],[0,"list","my_algo::ch2","",null,null],[3,"IndexError","my_algo::ch2::list","下标错误类型.",null,null],[8,"List","","元素类型为`Item`的线性表.",null,null],[11,"is_empty","","判断线性表是否为空.",13,[[]]],[11,"is_full","","判断线性表是否满.",13,[[]]],[11,"is_index_read_valid","","判断下标是否越界(访问时).",13,[[]]],[11,"is_index_insert_valid","","判断下标是否越界(插入时).",13,[[]]],[10,"swap","","交换`i`, `j`两个位置的元素.",13,[[],[["result",4],["indexerror",3]]]],[11,"reverse_between","","逆置[begin, end]之间的元素.",13,[[],[["result",4],["indexerror",3]]]],[11,"reverse","","逆置所有元素.",13,[[]]],[10,"len","","获取线性表的长度.",13,[[]]],[10,"get","","获取序号为`index`的元素的只读引用.",13,[[],[["result",4],["indexerror",3]]]],[10,"get_mut","","获取序号为`index`的元素的可写引用.",13,[[],[["result",4],["indexerror",3]]]],[10,"insert","","在位置`index`插入元素. 新元素将会被放置在位置`index`, 原来`index`位置及其后元素后移1位.",13,[[],[["result",4],["indexerror",3]]]],[10,"delete","","删除位置`index`上的元素. 其后元素将会前移1位置, 填补空缺.",13,[[],[["result",4],["indexerror",3]]]],[11,"to_refs","","将`List<T>`转化为`List<&T>`",13,[[],["default",8]]],[8,"ListExt","","`List` trait的一个扩展trait.",null,null],[11,"shift","","循环左移`index`个位置.",14,[[],[["result",4],["indexerror",3]]]],[11,"slice_mut","","获取一个可变切片范围`start..end`.",14,[[],[["indexerror",3],["slicemut",3],["result",4]]]],[11,"slice","","获取一个只读切片范围`start..end`.",14,[[],[["indexerror",3],["result",4],["slice",3]]]],[0,"partial_eq","my_algo::ch2","",null,null],[8,"PartialEqListExt","my_algo::ch2::partial_eq","`List` trait的一个扩展trait, 提供了一些基于判等的方法.",null,null],[11,"locate","","查找值等于`x`的元素, 找到后返回序号, 若未找到则返回`None`.",15,[[],["option",4]]],[11,"delete_all","","删除所有值等于`x`的元素. 这是一个不保序的算法.",15,[[]]],[11,"primary","","计算序列的主元素, 若存在则返回该元素的引用, 若不存在则返回`None`.…",15,[[],["option",4]]],[0,"partial_ord","my_algo::ch2","",null,null],[8,"PartialOrdListExt","my_algo::ch2::partial_ord","`List` trait的一个扩展trait, 提供了一些基于偏序的方法.",null,null],[11,"search","","二分搜索. 在有序表中搜索元素`x`, 返回最大的不超过`x`的元素序号, 若所有元素都比`x`大,…",16,[[],["option",4]]],[11,"merge_mid","","给出两个有序表的中位数(即两个有序表合并为新的有序表后的中位数).",16,[[],["option",4]]],[11,"mid","","给出有序表的中位数(第`⌈len / 2⌉`个).",16,[[],["option",4]]],[11,"mid_between","","在[a, b)范围内计算中位数(第`⌈(a + b) / 2⌉`个).",16,[[],["option",4]]],[11,"merge","","合并两个有序表, 得到一个新的有序表.",16,[[]]],[11,"dedup_sorted","","对有序表去重. 这是一个保序的算法.",16,[[]]],[11,"delete_between_unsorted","","删除表中值介于`x`, `y`之间(含)的所有元素(`x` < `y`), 返回被删除的元素列表.…",16,[[],["vec",3]]],[11,"delete_between","","删除有序表中值介于`x`,`y`之间的所有元素(`x` < `y`, 不含`x`及`y`), 返回被删除的元素列表.…",16,[[],["vec",3]]],[11,"delete_between_opt","","删除有序表中值介于`x`,`y`之间的所有元素(`x` < `y`,…",16,[[],["vec",3]]],[11,"partition","","快速排序中的helper function.",16,[[],["option",4]]],[11,"sort_between","","对`begin`~`end`之间的元素进行快速排序.",16,[[]]],[11,"sort","","快速排序.",16,[[]]],[11,"locate_min","","寻找第一个极小元的位置. 若表空, 则返回`None`.",16,[[],["option",4]]],[11,"delete_min","","删除第一个极小元. 若表空, 则返回`None`. 这不是一个保序的算法.",16,[[],["option",4]]],[0,"slice","my_algo::ch2","",null,null],[3,"Slice","my_algo::ch2::slice","",null,null],[3,"SliceMut","","",null,null],[11,"new","","",17,[[],[["indexerror",3],["result",4]]]],[11,"new","","",18,[[],[["indexerror",3],["result",4]]]],[0,"ch3","my_algo","实现了栈与队列相关算法.",null,null],[4,"Error","my_algo::ch3","`ch3`中的错误类型.",null,null],[13,"StackOverflow","","栈上溢.",19,null],[13,"ExpressionNotValid","","表达式不合法.",19,null],[0,"queue","","队列特质与队列算法.",null,null],[3,"CircularQueue","my_algo::ch3::queue","(有限容量的)循环队列.",null,null],[8,"Queue","","队列特质. 具有`FIFO`性质.",null,null],[16,"Elem","","",20,null],[10,"enqueue","","入队. 若入队成功则返回`None`, 否则返回`elem`.",20,[[],["option",4]]],[10,"dequeue","","出队. 若队空则返回`None`, 否则返回队首元素.",20,[[],["option",4]]],[10,"is_empty","","队是否为空.",20,[[]]],[10,"is_full","","队是否满.",20,[[]]],[8,"QueueExt","","队列扩展特质. 实现了一些队列算法.",null,null],[11,"reverse_by","","使用指定栈翻转队列元素.",21,[[]]],[11,"new","","",22,[[]]],[0,"stack","my_algo::ch3","栈特质与栈算法.",null,null],[3,"SharedStack","my_algo::ch3::stack","共享栈.",null,null],[3,"LeftStack","","共享栈中的左栈.",null,null],[3,"RightStack","","共享栈中的右栈.",null,null],[3,"SliceStack","","(复制)切片栈.",null,null],[3,"DefaultSliceStack","","(默认)切片栈.",null,null],[3,"DoubleStack","","双栈.",null,null],[8,"Stack","","栈特质. 具有`LIFO`性质.",null,null],[16,"Elem","","栈元素.",23,null],[10,"push","","入栈. 若入栈成功则返回`None`, 否则返回`item`.",23,[[],["option",4]]],[10,"pop","","出栈. 若栈空则返回`None`, 否则返回栈顶元素.",23,[[],["option",4]]],[11,"is_empty","","栈是否为空.",23,[[]]],[11,"is_full","","栈是否满.",23,[[]]],[10,"cap","","栈容量.",23,[[],["option",4]]],[10,"len","","栈大小.",23,[[]]],[10,"top","","栈顶元素.",23,[[],["option",4]]],[8,"StackExt","","栈扩展特质. 实现了一些栈算法.",null,null],[11,"is_valid_pop_sequence","","判断是否为合法出栈顺序.",24,[[]]],[11,"is_valid_pop_sequence_recurrence","","判断是否为输入序列`[base, base + seq.len())`的合法的出栈顺序(利用递归性质).",24,[[]]],[11,"is_centrosymmetric","","判断一个单链表是否为中心对称的.",24,[[]]],[11,"express_in","","(不超过16进制)进制输出.",24,[[],["string",3]]],[11,"is_brackets_match","","判断一个表达式中的括号是否匹配. 仅支持`(`, `)`, `[`, `]`, `{`, `}`, 三种括号的匹配.",24,[[]]],[11,"to_rpn","","将中缀表达式转换为后缀表达式(逆波兰表达式, rpn).",24,[[],[["string",3],["result",6]]]],[11,"eval_rpn","","计算逆波兰表达式.",24,[[],["result",6]]],[11,"new","","创建一个容量为`size`的共享栈.",25,[[]]],[11,"cap","","获取共享栈的总容量.",25,[[]]],[11,"left_len","","左栈大小.",25,[[]]],[11,"left_cap","","左栈容量.",25,[[]]],[11,"is_left_empty","","左栈是否为空.",25,[[]]],[11,"is_left_full","","左栈是否满.",25,[[]]],[11,"right_len","","右栈大小.",25,[[]]],[11,"right_cap","","右栈容量.",25,[[]]],[11,"is_right_empty","","右栈是否为空.",25,[[]]],[11,"is_right_full","","左栈是否满.",25,[[]]],[11,"as_left_stack","","获取左栈.",25,[[],["leftstack",3]]],[11,"as_right_stack","","获取右栈.",25,[[],["rightstack",3]]],[0,"ch4","my_algo","",null,null],[0,"binary_search_tree","my_algo::ch4","",null,null],[3,"Entry","my_algo::ch4::binary_search_tree","词条结构，表示一个键值对.",null,null],[12,"key","","",26,null],[12,"value","","",26,null],[0,"llrbt","","左倾红黑树(只允许存在红左链)",null,null],[3,"RBTreeMap","my_algo::ch4::binary_search_tree::llrbt","",null,null],[0,"bst2","my_algo::ch4::binary_search_tree","二叉查找树(非generic)",null,null],[3,"TreeMap","my_algo::ch4::binary_search_tree::bst2","",null,null],[3,"Iter","","",null,null],[11,"new","","",27,[[["treemap",3]]]],[0,"rbt","my_algo::ch4::binary_search_tree","红黑树",null,null],[3,"RBNode","my_algo::ch4::binary_search_tree::rbt","",null,null],[3,"RBTreeMap","","基于红黑树的字典(Map).",null,null],[6,"RBEntry","","",null,null],[11,"new","","",28,[[]]],[0,"bt","my_algo::ch4::binary_search_tree","B树.",null,null],[3,"BTreeMap","my_algo::ch4::binary_search_tree::bt","",null,null],[3,"Iter","","",null,null],[11,"new","","",29,[[["btreemap",3]]]],[11,"new","","",30,[[]]],[0,"st","my_algo::ch4::binary_search_tree","伸展树(Splay Tree).",null,null],[3,"SplayTreeMap","my_algo::ch4::binary_search_tree::st","伸展树.",null,null],[0,"avlt","my_algo::ch4::binary_search_tree","AVL树.",null,null],[3,"AVLNode","my_algo::ch4::binary_search_tree::avlt","",null,null],[3,"AVLTreeMap","","",null,null],[6,"AVLEntry","","",null,null],[0,"bst","my_algo::ch4::binary_search_tree","基础二叉查找树.",null,null],[3,"TreeMap","my_algo::ch4::binary_search_tree::bst","二叉查找树.",null,null],[8,"Map","my_algo::ch4::binary_search_tree","字典特质.",null,null],[10,"get","","返回键所对应的值的引用.",31,[[],["option",4]]],[10,"get_mut","","返回键所对应的值的可变引用.",31,[[],["option",4]]],[10,"insert","","插入一个键值对.",31,[[],["option",4]]],[10,"get_mut_or_insert","","返回键所对应值的可变引用. 若不存在则插入`default`后，再返回可变引用.",31,[[]]],[10,"remove","","移除一个键值对，并返回它的值.",31,[[],["option",4]]],[10,"len","","返回字典的大小.",31,[[]]],[11,"is_empty","","字典是否为空.",31,[[]]],[10,"iter","","",31,[[],[["box",3],["iterator",8]]]],[0,"binary_tree","my_algo::ch4","",null,null],[0,"coding_tree","my_algo::ch4::binary_tree","",null,null],[3,"HuffmanChar","my_algo::ch4::binary_tree::coding_tree","",null,null],[3,"HuffmanCodingTree","","",null,null],[5,"char_count","","",null,[[],["map",8]]],[11,"new","","创建Huffman编码树，并对`text`进行编码.",32,[[],["option",4]]],[11,"encoded","","",32,[[]]],[11,"decode","","",32,[[],["string",3]]],[0,"cursor","my_algo::ch4::binary_tree","",null,null],[8,"BinTreeCursor","my_algo::ch4::binary_tree::cursor","",null,null],[11,"is_empty_subtree","","是否为空树.",33,[[]]],[11,"is_leaf","","是否为叶子结点.",33,[[]]],[10,"is_parent","","判断另一结点是否为当前结点的父母.(`other`与`self`必须是同一树中的结点.)",33,[[]]],[10,"as_ref","","若为空树则返回`None`，否则返回当前结点(根)的内容的引用.",33,[[],["option",4]]],[10,"left","","若为空树或不含左孩子则返回`None`，否则返回左孩子的内容的引用.",33,[[],["option",4]]],[10,"right","","若为空树或不含右孩子则返回`None`，否则返回右孩子的内容的引用.",33,[[],["option",4]]],[10,"move_left","","若为空树则`no-op`，否则变为左子树.",33,[[]]],[10,"move_right","","若为空树则`no-op`，否则变为右子树.",33,[[]]],[11,"move_succ","","移动到当前结点的在子树中的直接中序后继，若为空树或无右子树则为`no-op`.",33,[[]]],[11,"split","","创建指向左右子树的游标. 若为空树，则返回`None`.",33,[[]]],[10,"into_ref","","",33,[[],["option",4]]],[8,"BinTreeCursorMut","","",null,null],[16,"SubTree","","",34,null],[10,"as_mut","","若为空树则返回`None`，否则返回当前结点(根)的内容的可变引用.",34,[[],["option",4]]],[10,"left_mut","","若为空树或不含左孩子则返回`None`，否则返回左孩子的内容的可变引用.",34,[[],["option",4]]],[10,"right_mut","","若为空树或不含右孩子则返回`None`，否则返回右孩子的内容的可变引用.",34,[[],["option",4]]],[10,"move_succ_and_split_mut","","移动至当前结点在子树中的直接中序后继，并返回原来所指结点内容的可变引用以及后继所指结点内容的可变引用.…",34,[[]]],[11,"move_succ_and_split_mut_unchecked","","(unsafe版本)移动至当前结点在子树中的直接中序后继，并返回原来所指结点的可变引用.…",34,[[]]],[10,"insert_as_root","","插入一个元素作为根. 若不为空树，则是`no-op`并返回被插入的元素， 否则将元素作为根插入树中，并返回`None`.",34,[[],["option",4]]],[10,"insert_as_left","","插入一个元素作为左孩子.",34,[[],["option",4]]],[10,"insert_as_right","","插入一个元素作为右孩子.",34,[[],["option",4]]],[10,"into_inner","","消耗整棵子树返回根的内容. 若为空树，则返回`None`.",34,[[],["option",4]]],[10,"append","","把一棵树作为子树接入. 若当前子树不为空则报错.",34,[[]]],[10,"append_left","","把一棵树作为左子树接入.",34,[[]]],[10,"append_right","","把一棵树作为右子树接入.",34,[[]]],[10,"take","","摘取整棵子树并返回. 若树为空则返回空树.",34,[[]]],[10,"take_left","","摘取左子树并返回. 若树为空，则返回`None`，若子树为空，则返回空树.",34,[[],["option",4]]],[10,"take_right","","摘取右子树并返回. 若树为空，则返回`None`，若子树为空，则返回空树.",34,[[],["option",4]]],[10,"into_mut","","",34,[[],["option",4]]],[11,"zig","","顺时针旋转子树(提升左子树)，游标所指位置不变.",34,[[]]],[11,"zag","","逆时针旋转子树(提升右子树)，游标所指位置不变.",34,[[]]],[8,"MoveParentCursor","","",null,null],[10,"move_parent","","",35,[[]]],[10,"parent","","",35,[[],["option",4]]],[10,"is_left_child","","判断当前结点是否为左孩子.",35,[[]]],[8,"MoveParentCursorMut","","",null,null],[10,"parent_mut","","",36,[[],["option",4]]],[0,"cursor_ext","my_algo::ch4::binary_tree","",null,null],[8,"BinTreeCursorExt","my_algo::ch4::binary_tree::cursor_ext","",null,null],[11,"in_order_iter","","创建一个层序遍历迭代器.",37,[[],["inorderiter",3]]],[11,"pre_order_iter","","创建一个前序遍历迭代器.",37,[[],["preorderiter",3]]],[11,"mid_order_iter","","创建一个中序遍历迭代器.",37,[[],["midorderiter",3]]],[11,"into_mid_order_iter","","转变为一个中序遍历迭代器.",37,[[],["midorderiter",3]]],[11,"post_order_iter","","创建一个后序遍历迭代器.",37,[[],["postorderiter",3]]],[0,"doubly_linked_binary_tree","my_algo::ch4::binary_tree","",null,null],[3,"DoublyLinkedBinaryTree","my_algo::ch4::binary_tree::doubly_linked_binary_tree","",null,null],[0,"cursor","","",null,null],[3,"Cursor","my_algo::ch4::binary_tree::doubly_linked_binary_tree::cursor","不可变游标.",null,null],[3,"CursorMut","","可变游标.",null,null],[11,"new","","提供一个树的引用，返回一个只读游标.",38,[[["doublylinkedbinarytree",3]]]],[11,"new","","",39,[[["doublylinkedbinarytree",3]]]],[11,"new","my_algo::ch4::binary_tree::doubly_linked_binary_tree","",40,[[]]],[0,"iter","my_algo::ch4::binary_tree","",null,null],[3,"InOrderIter","my_algo::ch4::binary_tree::iter","层序遍历迭代器结构.",null,null],[3,"PreOrderIter","","前序遍历迭代器结构.",null,null],[3,"MidOrderIter","","中序遍历迭代器结构.",null,null],[3,"PostOrderIter","","后序遍历迭代器.",null,null],[11,"new","","",41,[[["option",4]]]],[11,"new","","",42,[[["option",4]]]],[11,"new","","",43,[[]]],[11,"new","","",44,[[]]],[0,"linked_binary_tree","my_algo::ch4::binary_tree","",null,null],[3,"LinkedBinaryTree","my_algo::ch4::binary_tree::linked_binary_tree","链式二叉树. 带哨兵根结点，根结点是它的左孩子，根结点的后代都是非哨兵结点.",null,null],[0,"cursor","","",null,null],[3,"Cursor","my_algo::ch4::binary_tree::linked_binary_tree::cursor","链式二叉树只读游标.",null,null],[3,"CursorMut","","链式二叉树可变游标.",null,null],[11,"new","","",45,[[["linkedbinarytree",3]]]],[11,"from_cursor_mut","","",45,[[["cursormut",3]]]],[11,"new","","",46,[[["linkedbinarytree",3]]]],[11,"new","my_algo::ch4::binary_tree::linked_binary_tree","",47,[[]]],[0,"vec_binary_tree","my_algo::ch4::binary_tree","",null,null],[3,"VecBinaryTree","my_algo::ch4::binary_tree::vec_binary_tree","基于`Vec`实现的二叉顺序树.",null,null],[0,"cursor","","",null,null],[3,"Cursor","my_algo::ch4::binary_tree::vec_binary_tree::cursor","",null,null],[3,"CursorMut","","",null,null],[11,"new","","",48,[[["vecbinarytree",3]]]],[11,"from_cursor_mut","","",48,[[["cursormut",3]]]],[11,"in_order_iter","","",49,[[],["inorderiter",3]]],[11,"new","","",49,[[["vecbinarytree",3]]]],[0,"iter","my_algo::ch4::binary_tree::vec_binary_tree","",null,null],[3,"InOrderIter","my_algo::ch4::binary_tree::vec_binary_tree::iter","",null,null],[5,"in_order_index","","层序遍历下标公式. `base`为根下标，`index`为相对于根的下标(根为`0`).",null,[[]]],[11,"new","","",50,[[["vecbinarytree",3]]]],[11,"new","my_algo::ch4::binary_tree::vec_binary_tree","",51,[[]]],[8,"BinTree","my_algo::ch4::binary_tree","不可变二叉树特质.",null,null],[16,"Elem","","内容类型.",52,null],[16,"Cursor","","不可变游标类型.",52,null],[11,"is_empty","","是否为空树.",52,[[]]],[10,"cursor","","创建一个只读结点游标.",52,[[]]],[8,"MoveParentBinTree","","",null,null],[16,"MoveParentCursor","","不可变游标类型.",53,null],[10,"move_parent_cursor","","创建一个只读结点游标.",53,[[]]],[8,"BinTreeMut","","可变二叉树特质.",null,null],[16,"CursorMut","","可变游标类型.",54,null],[10,"cursor_mut","","创建一个可变结点游标.",54,[[]]],[8,"MoveParentBinTreeMut","","",null,null],[16,"MoveParentCursorMut","","可变游标类型.",55,null],[10,"move_parent_cursor_mut","","创建一个可变结点游标.",55,[[]]],[0,"priority_queue","my_algo::ch4","",null,null],[0,"complete_heap","my_algo::ch4::priority_queue","",null,null],[3,"CompleteMaxHeap","my_algo::ch4::priority_queue::complete_heap","",null,null],[11,"sort","","堆排序. 消耗一个列表，并返回一个排序好的列表.",56,[[["myvec",3]],["myvec",3]]],[0,"left_heap","my_algo::ch4::priority_queue","",null,null],[3,"LeftNode","my_algo::ch4::priority_queue::left_heap","",null,null],[3,"LeftHeap","","(大顶)左式堆.",null,null],[8,"PriorityQueue","my_algo::ch4::priority_queue","最大优先队列.",null,null],[10,"len","","获取队列长度.",57,[[]]],[11,"is_empty","","队列是否为空.",57,[[]]],[10,"delete_max","","删除最大元素. 若队列为空则返回`None`.",57,[[],["option",4]]],[10,"get_max","","读取最大元素. 若队列为空则返回`None`.",57,[[],["option",4]]],[10,"insert","","向队列插入一个元素.",57,[[]]],[10,"merge","","合并两个优先队列.",57,[[]]],[0,"ch5","my_algo","",null,null],[0,"adjacency_list","my_algo::ch5","",null,null],[3,"VertexIndex","my_algo::ch5::adjacency_list","",null,null],[3,"LinkedGraph","","",null,null],[3,"VIter","","",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[0,"cycle","my_algo::ch5","",null,null],[3,"Cycle","my_algo::ch5::cycle","",null,null],[11,"has_cycle","","",58,[[]]],[11,"path","","",58,[[],[["option",4],["path",3]]]],[11,"new","","",58,[[]]],[0,"order","my_algo::ch5","",null,null],[3,"DepthFirstOrder","my_algo::ch5::order","",null,null],[3,"PreOrderIter","","",null,null],[3,"PostOrderIter","","",null,null],[3,"ReversePostOrderIter","","",null,null],[3,"Topological","","",null,null],[11,"new","","",59,[[]]],[11,"pre","","",59,[[],["preorderiter",3]]],[11,"post","","",59,[[],["postorderiter",3]]],[11,"reverse_post","","",59,[[],["reversepostorderiter",3]]],[11,"new","","",60,[[]]],[0,"path","my_algo::ch5","",null,null],[3,"Path","my_algo::ch5::path","",null,null],[3,"DepthFirstPaths","","",null,null],[3,"BreadthFirstPaths","","",null,null],[11,"has_path_to","","",61,[[]]],[11,"path_to","","",61,[[],["path",3]]],[11,"uninit","","",61,[[]]],[11,"new","","",61,[[]]],[11,"has_path_to","","",62,[[]]],[11,"path_to","","",62,[[],["path",3]]],[11,"new","","",62,[[]]],[0,"scc","my_algo::ch5","",null,null],[3,"KosarajuSCC","my_algo::ch5::scc","",null,null],[11,"new","","",63,[[]]],[11,"is_strongly_connected","","",63,[[]]],[11,"id","","",63,[[],["option",4]]],[11,"len","","",63,[[]]],[11,"is_empty","","",63,[[]]],[0,"traits","my_algo::ch5","",null,null],[3,"Marked","my_algo::ch5::traits","",null,null],[3,"Empty","","",null,null],[8,"Graph","","",null,null],[16,"VertexKey","","",64,null],[16,"VertexValue","","",64,null],[16,"Edge","","",64,null],[16,"VIter","","",64,null],[16,"Iter","","",64,null],[16,"IterMut","","",64,null],[10,"vertexs","","",64,[[]]],[10,"vertex_num","","",64,[[]]],[10,"edge_num","","",64,[[]]],[10,"add_edge","","",64,[[],[["option",4],["result",4]]]],[10,"push_vertex","","",64,[[]]],[10,"get_vertex","","",64,[[],["option",4]]],[10,"get_vertex_mut","","",64,[[],["option",4]]],[10,"adj","","",64,[[]]],[10,"adj_mut","","",64,[[]]],[11,"add_undirected_edge","","",64,[[]]],[11,"dfs_paths","","",64,[[],["depthfirstpaths",3]]],[11,"bfs_paths","","",64,[[],["breadthfirstpaths",3]]],[11,"find_one_cycle","","",64,[[],[["option",4],["path",3]]]],[11,"dfs","","",64,[[],[["hashmap",3],["marked",3]]]],[11,"dfs_mut","","",64,[[],[["hashmap",3],["marked",3]]]],[11,"bfs","","",64,[[],[["hashmap",3],["marked",3]]]],[11,"bfs_mut","","",64,[[],[["hashmap",3],["marked",3]]]],[11,"degree","","",64,[[]]],[11,"max_degree","","",64,[[]]],[11,"to_string","","",64,[[],["string",3]]],[11,"keys","","",64,[[],[["linkedgraph",3],["empty",3]]]],[11,"scc","","",64,[[],["kosarajuscc",3]]],[11,"reversed","","",64,[[]]],[11,"dfs_order","","",64,[[],["depthfirstorder",3]]],[11,"topological","","",64,[[],["topological",3]]],[0,"vec","my_algo","自定义的向量实现(参考`Rustnomicorn`).",null,null],[3,"MyVec","my_algo::vec","自定义的`Vec`, 采用和`Vec`一样的翻倍扩容策略.",null,null],[11,"new","","创建一个新的`MyVec`.",65,[[]]],[11,"push","","在`MyVec`的末尾插入一个新值.",65,[[]]],[11,"pop","","弹出`MyVec`末尾的值, 若表空则返回`None`.",65,[[],["option",4]]],[11,"from","my_algo::ch2::linked_list::cdll","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","my_algo::ch2::linked_list::cdll::cursor","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","my_algo::ch2::linked_list::cdll::iter","",66,[[]]],[11,"into","","",66,[[]]],[11,"into_iter","","",66,[[]]],[11,"borrow","","",66,[[]]],[11,"borrow_mut","","",66,[[]]],[11,"try_from","","",66,[[],["result",4]]],[11,"try_into","","",66,[[],["result",4]]],[11,"type_id","","",66,[[],["typeid",3]]],[11,"from","","",67,[[]]],[11,"into","","",67,[[]]],[11,"into_iter","","",67,[[]]],[11,"borrow","","",67,[[]]],[11,"borrow_mut","","",67,[[]]],[11,"try_from","","",67,[[],["result",4]]],[11,"try_into","","",67,[[],["result",4]]],[11,"type_id","","",67,[[],["typeid",3]]],[11,"from","my_algo::ch2::linked_list::shll","",68,[[]]],[11,"into","","",68,[[]]],[11,"borrow","","",68,[[]]],[11,"borrow_mut","","",68,[[]]],[11,"try_from","","",68,[[],["result",4]]],[11,"try_into","","",68,[[],["result",4]]],[11,"type_id","","",68,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",69,[[]]],[11,"into","","",69,[[]]],[11,"into_iter","","",69,[[]]],[11,"borrow","","",69,[[]]],[11,"borrow_mut","","",69,[[]]],[11,"try_from","","",69,[[],["result",4]]],[11,"try_into","","",69,[[],["result",4]]],[11,"type_id","","",69,[[],["typeid",3]]],[11,"from","","",70,[[]]],[11,"into","","",70,[[]]],[11,"into_iter","","",70,[[]]],[11,"borrow","","",70,[[]]],[11,"borrow_mut","","",70,[[]]],[11,"try_from","","",70,[[],["result",4]]],[11,"try_into","","",70,[[],["result",4]]],[11,"type_id","","",70,[[],["typeid",3]]],[11,"from","","",71,[[]]],[11,"into","","",71,[[]]],[11,"to_owned","","",71,[[]]],[11,"clone_into","","",71,[[]]],[11,"borrow","","",71,[[]]],[11,"borrow_mut","","",71,[[]]],[11,"try_from","","",71,[[],["result",4]]],[11,"try_into","","",71,[[],["result",4]]],[11,"type_id","","",71,[[],["typeid",3]]],[11,"from","","",72,[[]]],[11,"into","","",72,[[]]],[11,"borrow","","",72,[[]]],[11,"borrow_mut","","",72,[[]]],[11,"try_from","","",72,[[],["result",4]]],[11,"try_into","","",72,[[],["result",4]]],[11,"type_id","","",72,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","my_algo::ch2::linked_list::sll","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"into_iter","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","my_algo::ch2::list","",73,[[]]],[11,"into","","",73,[[]]],[11,"borrow","","",73,[[]]],[11,"borrow_mut","","",73,[[]]],[11,"try_from","","",73,[[],["result",4]]],[11,"try_into","","",73,[[],["result",4]]],[11,"type_id","","",73,[[],["typeid",3]]],[11,"from","my_algo::ch2::slice","",17,[[]]],[11,"into","","",17,[[]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"borrow","","",18,[[]]],[11,"borrow_mut","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","my_algo::ch3","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","my_algo::ch3::queue","",22,[[]]],[11,"into","","",22,[[]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","my_algo::ch3::stack","",25,[[]]],[11,"into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"from","","",74,[[]]],[11,"into","","",74,[[]]],[11,"borrow","","",74,[[]]],[11,"borrow_mut","","",74,[[]]],[11,"try_from","","",74,[[],["result",4]]],[11,"try_into","","",74,[[],["result",4]]],[11,"type_id","","",74,[[],["typeid",3]]],[11,"from","","",75,[[]]],[11,"into","","",75,[[]]],[11,"borrow","","",75,[[]]],[11,"borrow_mut","","",75,[[]]],[11,"try_from","","",75,[[],["result",4]]],[11,"try_into","","",75,[[],["result",4]]],[11,"type_id","","",75,[[],["typeid",3]]],[11,"from","","",76,[[]]],[11,"into","","",76,[[]]],[11,"borrow","","",76,[[]]],[11,"borrow_mut","","",76,[[]]],[11,"try_from","","",76,[[],["result",4]]],[11,"try_into","","",76,[[],["result",4]]],[11,"type_id","","",76,[[],["typeid",3]]],[11,"from","","",77,[[]]],[11,"into","","",77,[[]]],[11,"borrow","","",77,[[]]],[11,"borrow_mut","","",77,[[]]],[11,"try_from","","",77,[[],["result",4]]],[11,"try_into","","",77,[[],["result",4]]],[11,"type_id","","",77,[[],["typeid",3]]],[11,"from","","",78,[[]]],[11,"into","","",78,[[]]],[11,"borrow","","",78,[[]]],[11,"borrow_mut","","",78,[[]]],[11,"try_from","","",78,[[],["result",4]]],[11,"try_into","","",78,[[],["result",4]]],[11,"type_id","","",78,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_search_tree","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_search_tree::llrbt","",79,[[]]],[11,"into","","",79,[[]]],[11,"borrow","","",79,[[]]],[11,"borrow_mut","","",79,[[]]],[11,"try_from","","",79,[[],["result",4]]],[11,"try_into","","",79,[[],["result",4]]],[11,"type_id","","",79,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_search_tree::bst2","",80,[[]]],[11,"into","","",80,[[]]],[11,"borrow","","",80,[[]]],[11,"borrow_mut","","",80,[[]]],[11,"try_from","","",80,[[],["result",4]]],[11,"try_into","","",80,[[],["result",4]]],[11,"type_id","","",80,[[],["typeid",3]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"into_iter","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_search_tree::rbt","",81,[[]]],[11,"into","","",81,[[]]],[11,"borrow","","",81,[[]]],[11,"borrow_mut","","",81,[[]]],[11,"try_from","","",81,[[],["result",4]]],[11,"try_into","","",81,[[],["result",4]]],[11,"type_id","","",81,[[],["typeid",3]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_search_tree::bt","",30,[[]]],[11,"into","","",30,[[]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"from","","",29,[[]]],[11,"into","","",29,[[]]],[11,"into_iter","","",29,[[]]],[11,"borrow","","",29,[[]]],[11,"borrow_mut","","",29,[[]]],[11,"try_from","","",29,[[],["result",4]]],[11,"try_into","","",29,[[],["result",4]]],[11,"type_id","","",29,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_search_tree::st","",82,[[]]],[11,"into","","",82,[[]]],[11,"borrow","","",82,[[]]],[11,"borrow_mut","","",82,[[]]],[11,"try_from","","",82,[[],["result",4]]],[11,"try_into","","",82,[[],["result",4]]],[11,"type_id","","",82,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_search_tree::avlt","",83,[[]]],[11,"into","","",83,[[]]],[11,"borrow","","",83,[[]]],[11,"borrow_mut","","",83,[[]]],[11,"try_from","","",83,[[],["result",4]]],[11,"try_into","","",83,[[],["result",4]]],[11,"type_id","","",83,[[],["typeid",3]]],[11,"from","","",84,[[]]],[11,"into","","",84,[[]]],[11,"borrow","","",84,[[]]],[11,"borrow_mut","","",84,[[]]],[11,"try_from","","",84,[[],["result",4]]],[11,"try_into","","",84,[[],["result",4]]],[11,"type_id","","",84,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_search_tree::bst","",85,[[]]],[11,"into","","",85,[[]]],[11,"borrow","","",85,[[]]],[11,"borrow_mut","","",85,[[]]],[11,"try_from","","",85,[[],["result",4]]],[11,"try_into","","",85,[[],["result",4]]],[11,"type_id","","",85,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_tree::coding_tree","",86,[[]]],[11,"into","","",86,[[]]],[11,"borrow","","",86,[[]]],[11,"borrow_mut","","",86,[[]]],[11,"try_from","","",86,[[],["result",4]]],[11,"try_into","","",86,[[],["result",4]]],[11,"type_id","","",86,[[],["typeid",3]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_tree::doubly_linked_binary_tree","",40,[[]]],[11,"into","","",40,[[]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_tree::doubly_linked_binary_tree::cursor","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_tree::iter","",41,[[]]],[11,"into","","",41,[[]]],[11,"into_iter","","",41,[[]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"into_iter","","",42,[[]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"into_iter","","",43,[[]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"into_iter","","",44,[[]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_tree::linked_binary_tree","",47,[[]]],[11,"into","","",47,[[]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_tree::linked_binary_tree::cursor","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_tree::vec_binary_tree","",51,[[]]],[11,"into","","",51,[[]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_tree::vec_binary_tree::cursor","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"from","my_algo::ch4::binary_tree::vec_binary_tree::iter","",50,[[]]],[11,"into","","",50,[[]]],[11,"into_iter","","",50,[[]]],[11,"borrow","","",50,[[]]],[11,"borrow_mut","","",50,[[]]],[11,"try_from","","",50,[[],["result",4]]],[11,"try_into","","",50,[[],["result",4]]],[11,"type_id","","",50,[[],["typeid",3]]],[11,"from","my_algo::ch4::priority_queue::complete_heap","",56,[[]]],[11,"into","","",56,[[]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"from","my_algo::ch4::priority_queue::left_heap","",87,[[]]],[11,"into","","",87,[[]]],[11,"borrow","","",87,[[]]],[11,"borrow_mut","","",87,[[]]],[11,"try_from","","",87,[[],["result",4]]],[11,"try_into","","",87,[[],["result",4]]],[11,"type_id","","",87,[[],["typeid",3]]],[11,"from","","",88,[[]]],[11,"into","","",88,[[]]],[11,"borrow","","",88,[[]]],[11,"borrow_mut","","",88,[[]]],[11,"try_from","","",88,[[],["result",4]]],[11,"try_into","","",88,[[],["result",4]]],[11,"type_id","","",88,[[],["typeid",3]]],[11,"from","my_algo::ch5::adjacency_list","",89,[[]]],[11,"into","","",89,[[]]],[11,"to_owned","","",89,[[]]],[11,"clone_into","","",89,[[]]],[11,"borrow","","",89,[[]]],[11,"borrow_mut","","",89,[[]]],[11,"try_from","","",89,[[],["result",4]]],[11,"try_into","","",89,[[],["result",4]]],[11,"type_id","","",89,[[],["typeid",3]]],[11,"from","","",90,[[]]],[11,"into","","",90,[[]]],[11,"borrow","","",90,[[]]],[11,"borrow_mut","","",90,[[]]],[11,"try_from","","",90,[[],["result",4]]],[11,"try_into","","",90,[[],["result",4]]],[11,"type_id","","",90,[[],["typeid",3]]],[11,"from","","",91,[[]]],[11,"into","","",91,[[]]],[11,"into_iter","","",91,[[]]],[11,"borrow","","",91,[[]]],[11,"borrow_mut","","",91,[[]]],[11,"try_from","","",91,[[],["result",4]]],[11,"try_into","","",91,[[],["result",4]]],[11,"type_id","","",91,[[],["typeid",3]]],[11,"from","","",92,[[]]],[11,"into","","",92,[[]]],[11,"into_iter","","",92,[[]]],[11,"borrow","","",92,[[]]],[11,"borrow_mut","","",92,[[]]],[11,"try_from","","",92,[[],["result",4]]],[11,"try_into","","",92,[[],["result",4]]],[11,"type_id","","",92,[[],["typeid",3]]],[11,"from","","",93,[[]]],[11,"into","","",93,[[]]],[11,"into_iter","","",93,[[]]],[11,"borrow","","",93,[[]]],[11,"borrow_mut","","",93,[[]]],[11,"try_from","","",93,[[],["result",4]]],[11,"try_into","","",93,[[],["result",4]]],[11,"type_id","","",93,[[],["typeid",3]]],[11,"from","my_algo::ch5::cycle","",58,[[]]],[11,"into","","",58,[[]]],[11,"borrow","","",58,[[]]],[11,"borrow_mut","","",58,[[]]],[11,"try_from","","",58,[[],["result",4]]],[11,"try_into","","",58,[[],["result",4]]],[11,"type_id","","",58,[[],["typeid",3]]],[11,"from","my_algo::ch5::order","",59,[[]]],[11,"into","","",59,[[]]],[11,"borrow","","",59,[[]]],[11,"borrow_mut","","",59,[[]]],[11,"try_from","","",59,[[],["result",4]]],[11,"try_into","","",59,[[],["result",4]]],[11,"type_id","","",59,[[],["typeid",3]]],[11,"from","","",94,[[]]],[11,"into","","",94,[[]]],[11,"into_iter","","",94,[[]]],[11,"borrow","","",94,[[]]],[11,"borrow_mut","","",94,[[]]],[11,"try_from","","",94,[[],["result",4]]],[11,"try_into","","",94,[[],["result",4]]],[11,"type_id","","",94,[[],["typeid",3]]],[11,"from","","",95,[[]]],[11,"into","","",95,[[]]],[11,"into_iter","","",95,[[]]],[11,"borrow","","",95,[[]]],[11,"borrow_mut","","",95,[[]]],[11,"try_from","","",95,[[],["result",4]]],[11,"try_into","","",95,[[],["result",4]]],[11,"type_id","","",95,[[],["typeid",3]]],[11,"from","","",96,[[]]],[11,"into","","",96,[[]]],[11,"into_iter","","",96,[[]]],[11,"borrow","","",96,[[]]],[11,"borrow_mut","","",96,[[]]],[11,"try_from","","",96,[[],["result",4]]],[11,"try_into","","",96,[[],["result",4]]],[11,"type_id","","",96,[[],["typeid",3]]],[11,"from","","",60,[[]]],[11,"into","","",60,[[]]],[11,"into_iter","","",60,[[]]],[11,"borrow","","",60,[[]]],[11,"borrow_mut","","",60,[[]]],[11,"try_from","","",60,[[],["result",4]]],[11,"try_into","","",60,[[],["result",4]]],[11,"type_id","","",60,[[],["typeid",3]]],[11,"from","my_algo::ch5::path","",97,[[]]],[11,"into","","",97,[[]]],[11,"into_iter","","",97,[[]]],[11,"to_owned","","",97,[[]]],[11,"clone_into","","",97,[[]]],[11,"borrow","","",97,[[]]],[11,"borrow_mut","","",97,[[]]],[11,"try_from","","",97,[[],["result",4]]],[11,"try_into","","",97,[[],["result",4]]],[11,"type_id","","",97,[[],["typeid",3]]],[11,"from","","",61,[[]]],[11,"into","","",61,[[]]],[11,"borrow","","",61,[[]]],[11,"borrow_mut","","",61,[[]]],[11,"try_from","","",61,[[],["result",4]]],[11,"try_into","","",61,[[],["result",4]]],[11,"type_id","","",61,[[],["typeid",3]]],[11,"from","","",62,[[]]],[11,"into","","",62,[[]]],[11,"borrow","","",62,[[]]],[11,"borrow_mut","","",62,[[]]],[11,"try_from","","",62,[[],["result",4]]],[11,"try_into","","",62,[[],["result",4]]],[11,"type_id","","",62,[[],["typeid",3]]],[11,"from","my_algo::ch5::scc","",63,[[]]],[11,"into","","",63,[[]]],[11,"borrow","","",63,[[]]],[11,"borrow_mut","","",63,[[]]],[11,"try_from","","",63,[[],["result",4]]],[11,"try_into","","",63,[[],["result",4]]],[11,"type_id","","",63,[[],["typeid",3]]],[11,"from","my_algo::ch5::traits","",98,[[]]],[11,"into","","",98,[[]]],[11,"borrow","","",98,[[]]],[11,"borrow_mut","","",98,[[]]],[11,"try_from","","",98,[[],["result",4]]],[11,"try_into","","",98,[[],["result",4]]],[11,"type_id","","",98,[[],["typeid",3]]],[11,"from","","",99,[[]]],[11,"into","","",99,[[]]],[11,"to_owned","","",99,[[]]],[11,"clone_into","","",99,[[]]],[11,"borrow","","",99,[[]]],[11,"borrow_mut","","",99,[[]]],[11,"try_from","","",99,[[],["result",4]]],[11,"try_into","","",99,[[],["result",4]]],[11,"type_id","","",99,[[],["typeid",3]]],[11,"from","my_algo::vec","",65,[[]]],[11,"into","","",65,[[]]],[11,"borrow","","",65,[[]]],[11,"borrow_mut","","",65,[[]]],[11,"try_from","","",65,[[],["result",4]]],[11,"try_into","","",65,[[],["result",4]]],[11,"type_id","","",65,[[],["typeid",3]]],[11,"move_next","my_algo::ch2::linked_list::cdll::cursor","",1,[[]]],[11,"peek","","",1,[[],["option",4]]],[11,"is_front_or_empty","","",1,[[]]],[11,"is_empty","","",1,[[]]],[11,"is_ghost","","",1,[[]]],[11,"index","","",1,[[],["option",4]]],[11,"into_ref","","",1,[[],["option",4]]],[11,"move_next","","",2,[[]]],[11,"peek","","",2,[[],["option",4]]],[11,"is_front_or_empty","","",2,[[]]],[11,"is_empty","","",2,[[]]],[11,"is_ghost","","",2,[[]]],[11,"index","","",2,[[],["option",4]]],[11,"into_ref","","",2,[[],["option",4]]],[11,"is_front_or_empty","my_algo::ch2::linked_list::shll","注意: 如果当前结点为`None`或`None`的后继, 则返回`false`.",71,[[]]],[11,"is_empty","","注意: 如果当前结点为`None`或`None`的后继, 则返回`false`.",71,[[]]],[11,"is_ghost","","",71,[[]]],[11,"index","","当前结点的下标. 若当前结点为`None`或`None`的后继, 则返回`None`.",71,[[],["option",4]]],[11,"move_next","","移动游标到当前结点的直接后继. 逻辑上, 游标可以指向`None`的后继(即`prev`为`None`).",71,[[]]],[11,"peek","","获取当前结点内容的只读引用. 如果游标的当前结点为链表末尾的`None`或`None`的后继, 则返回`None`.",71,[[],["option",4]]],[11,"into_ref","","",71,[[],["option",4]]],[11,"index","","当前结点的下标. 若当前结点为`None`或`None`的后继, 则返回`None`.",72,[[],["option",4]]],[11,"move_next","","移动游标到当前结点的直接后继. 逻辑上, 游标可以指向`None`的后继(即`prev`为`None`).",72,[[]]],[11,"peek","","",72,[[],["option",4]]],[11,"is_front_or_empty","","",72,[[]]],[11,"is_empty","","",72,[[]]],[11,"is_ghost","","",72,[[]]],[11,"into_ref","","",72,[[],["option",4]]],[11,"as_cursor","my_algo::ch2::linked_list::cdll::cursor","转换为一个只读游标.",2,[[]]],[11,"peek_mut","","获取所指结点内容的可变引用. 若表空则返回`None`. 返回的可变引用的生命期受限于可变游标的可变引用的生命期,…",2,[[],["option",4]]],[11,"insert_before","","在当前结点前插入新值, 游标所指结点不变. 但注意以下行为:",2,[[],["option",4]]],[11,"insert_after","","在当前结点后插入新值, 游标所指结点不变. 若表空, 则新值将作为首结点插入, 游标指向首结点.",2,[[],["option",4]]],[11,"insert_before_as_current","","在当前结点前插入新值, 游标指向新插入的结点, 插入成功时返回`None`. 若位置不合法, 则返回被插入的值.",2,[[],["option",4]]],[11,"insert_after_as_current","","在当前结点后插入新值, 游标指向新插入的结点, 插入成功时返回`None`. 若位置不合法, 则返回被插入的值.",2,[[],["option",4]]],[11,"remove_current","","删除当前所指结点并返回其内容, 游标改为指向它的后继. 若表空则返回`None`.",2,[[],["option",4]]],[11,"as_cursor","my_algo::ch2::linked_list::shll","",72,[[]]],[11,"peek_mut","","",72,[[],["option",4]]],[11,"remove_current","","移除当前结点并返回它的内容, 当前结点将会变为原来结点的后继.",72,[[],["option",4]]],[11,"insert_before_as_current","","在当前结点前面插入一个新的结点作为当前结点的新前驱, 游标的当前结点变为该新前驱. 若插入成功则返回`None`,…",72,[[],["option",4]]],[11,"insert_before","","",72,[[],["option",4]]],[11,"insert_after","","",72,[[],["option",4]]],[11,"insert_after_as_current","","",72,[[],["option",4]]],[11,"is_empty","my_algo::ch2::linked_list::cdll","",3,[[]]],[11,"cursor_front","","",3,[[]]],[11,"cursor_front_mut","","",3,[[]]],[11,"len","","",3,[[]]],[11,"push_front","","",3,[[]]],[11,"pop_front","","",3,[[],["option",4]]],[11,"append","","连接两个链表. `other`将会变为空表.",3,[[]]],[11,"is_empty","my_algo::ch2::linked_list::shll","",5,[[]]],[11,"cursor_front_mut","","返回一个当前结点为首结点的可变游标.",5,[[],["cursormut",3]]],[11,"cursor_front","","返回一个当前结点为首结点的只读游标.",5,[[],["cursor",3]]],[11,"push_front","","在链表最前面插入新元素作为新的头结点.",5,[[]]],[11,"pop_front","","弹出链表最前面的元素. 若表空则返回`None`.",5,[[],["option",4]]],[11,"append","","连接两个链表.",5,[[]]],[11,"len","my_algo::ch2::slice","",17,[[]]],[11,"get","","",17,[[],[["result",4],["indexerror",3]]]],[11,"get_mut","","",17,[[],[["result",4],["indexerror",3]]]],[11,"swap","","",17,[[],[["result",4],["indexerror",3]]]],[11,"insert","","",17,[[],[["result",4],["indexerror",3]]]],[11,"delete","","",17,[[],[["result",4],["indexerror",3]]]],[11,"len","","",18,[[]]],[11,"get","","",18,[[],[["result",4],["indexerror",3]]]],[11,"get_mut","","",18,[[],[["result",4],["indexerror",3]]]],[11,"swap","","",18,[[],[["result",4],["indexerror",3]]]],[11,"insert","","",18,[[],[["result",4],["indexerror",3]]]],[11,"delete","","",18,[[],[["result",4],["indexerror",3]]]],[11,"len","my_algo::vec","",65,[[]]],[11,"get","","",65,[[],[["result",4],["indexerror",3]]]],[11,"get_mut","","",65,[[],[["result",4],["indexerror",3]]]],[11,"swap","","",65,[[],[["result",4],["indexerror",3]]]],[11,"insert","","",65,[[],[["result",4],["indexerror",3]]]],[11,"delete","","",65,[[],[["result",4],["indexerror",3]]]],[11,"is_full","my_algo::ch2::linked_list::cdll","",3,[[]]],[11,"is_empty","","",3,[[]]],[11,"enqueue","","",3,[[],["option",4]]],[11,"dequeue","","",3,[[],["option",4]]],[11,"is_empty","my_algo::ch3::queue","",22,[[]]],[11,"is_full","","",22,[[]]],[11,"enqueue","","",22,[[],["option",4]]],[11,"dequeue","","",22,[[],["option",4]]],[11,"is_empty","my_algo::ch3::stack","",25,[[]]],[11,"is_full","","",25,[[]]],[11,"enqueue","","",25,[[],["option",4]]],[11,"dequeue","","",25,[[],["option",4]]],[11,"is_empty","","",78,[[]]],[11,"is_full","","",78,[[]]],[11,"enqueue","","",78,[[],["option",4]]],[11,"dequeue","","",78,[[],["option",4]]],[11,"is_full","my_algo::vec","",65,[[]]],[11,"cap","","",65,[[],["option",4]]],[11,"len","","",65,[[]]],[11,"is_empty","","",65,[[]]],[11,"push","","",65,[[],["option",4]]],[11,"pop","","",65,[[],["option",4]]],[11,"top","","",65,[[],["option",4]]],[11,"is_full","my_algo::ch2::linked_list::cdll","",3,[[]]],[11,"cap","","",3,[[],["option",4]]],[11,"len","","",3,[[]]],[11,"is_empty","","",3,[[]]],[11,"push","","",3,[[],["option",4]]],[11,"pop","","",3,[[],["option",4]]],[11,"top","","",3,[[],["option",4]]],[11,"is_full","my_algo::ch2::linked_list::shll","",5,[[]]],[11,"cap","","",5,[[],["option",4]]],[11,"len","","",5,[[]]],[11,"is_empty","","",5,[[]]],[11,"push","","",5,[[],["option",4]]],[11,"pop","","",5,[[],["option",4]]],[11,"top","","",5,[[],["option",4]]],[11,"len","my_algo::ch3::stack","",25,[[]]],[11,"cap","","",25,[[],["option",4]]],[11,"top","","",25,[[],["option",4]]],[11,"push","","",25,[[],["option",4]]],[11,"pop","","",25,[[],["option",4]]],[11,"len","","",74,[[]]],[11,"cap","","",74,[[],["option",4]]],[11,"push","","",74,[[],["option",4]]],[11,"pop","","",74,[[],["option",4]]],[11,"top","","",74,[[],["option",4]]],[11,"len","","",75,[[]]],[11,"cap","","",75,[[],["option",4]]],[11,"push","","",75,[[],["option",4]]],[11,"pop","","",75,[[],["option",4]]],[11,"top","","",75,[[],["option",4]]],[11,"cap","","",76,[[],["option",4]]],[11,"len","","",76,[[]]],[11,"push","","",76,[[],["option",4]]],[11,"pop","","",76,[[],["option",4]]],[11,"top","","",76,[[],["option",4]]],[11,"cap","","",77,[[],["option",4]]],[11,"len","","",77,[[]]],[11,"push","","",77,[[],["option",4]]],[11,"pop","","",77,[[],["option",4]]],[11,"top","","",77,[[],["option",4]]],[11,"get","my_algo::ch4::binary_search_tree::llrbt","",79,[[],["option",4]]],[11,"get_mut","","",79,[[],["option",4]]],[11,"len","","",79,[[]]],[11,"iter","","",79,[[],[["box",3],["iterator",8]]]],[11,"insert","","",79,[[],["option",4]]],[11,"get_mut_or_insert","","",79,[[]]],[11,"remove","","",79,[[],["option",4]]],[11,"get","my_algo::ch4::binary_search_tree::bst2","",80,[[],["option",4]]],[11,"get_mut","","",80,[[],["option",4]]],[11,"get_mut_or_insert","","",80,[[]]],[11,"insert","","",80,[[],["option",4]]],[11,"remove","","",80,[[],["option",4]]],[11,"len","","",80,[[]]],[11,"iter","","",80,[[],[["box",3],["iterator",8]]]],[11,"get","my_algo::ch4::binary_search_tree::rbt","",28,[[],["option",4]]],[11,"get_mut","","",28,[[],["option",4]]],[11,"len","","",28,[[]]],[11,"get_mut_or_insert","","",28,[[]]],[11,"insert","","",28,[[],["option",4]]],[11,"remove","","",28,[[],["option",4]]],[11,"iter","","",28,[[],[["box",3],["iterator",8]]]],[11,"len","my_algo::ch4::binary_search_tree::bt","",30,[[]]],[11,"get","","",30,[[],["option",4]]],[11,"get_mut","","",30,[[],["option",4]]],[11,"get_mut_or_insert","","",30,[[]]],[11,"insert","","",30,[[],["option",4]]],[11,"remove","","",30,[[],["option",4]]],[11,"iter","","",30,[[],[["box",3],["iterator",8]]]],[11,"get","my_algo::ch4::binary_search_tree::st","返回键所对应的值的引用.",82,[[],["option",4]]],[11,"get_mut","","返回键所对应的值的可变引用.",82,[[],["option",4]]],[11,"len","","",82,[[]]],[11,"iter","","",82,[[],[["box",3],["iterator",8]]]],[11,"get_mut_or_insert","","",82,[[]]],[11,"insert","","",82,[[],["option",4]]],[11,"remove","","",82,[[],["option",4]]],[11,"get","my_algo::ch4::binary_search_tree::avlt","",84,[[],["option",4]]],[11,"get_mut","","",84,[[],["option",4]]],[11,"len","","",84,[[]]],[11,"get_mut_or_insert","","",84,[[]]],[11,"insert","","",84,[[],["option",4]]],[11,"remove","","",84,[[],["option",4]]],[11,"iter","","",84,[[],[["box",3],["iterator",8]]]],[11,"get","my_algo::ch4::binary_search_tree::bst","",85,[[],["option",4]]],[11,"get_mut","","",85,[[],["option",4]]],[11,"len","","",85,[[]]],[11,"get_mut_or_insert","","",85,[[]]],[11,"insert","","",85,[[],["option",4]]],[11,"remove","","",85,[[],["option",4]]],[11,"iter","","",85,[[],[["box",3],["iterator",8]]]],[11,"is_parent","my_algo::ch4::binary_tree::doubly_linked_binary_tree::cursor","",38,[[]]],[11,"as_ref","","",38,[[],["option",4]]],[11,"left","","",38,[[],["option",4]]],[11,"right","","",38,[[],["option",4]]],[11,"move_left","","",38,[[]]],[11,"move_right","","",38,[[]]],[11,"into_ref","","",38,[[],["option",4]]],[11,"is_parent","","",39,[[]]],[11,"as_ref","","",39,[[],["option",4]]],[11,"left","","",39,[[],["option",4]]],[11,"right","","",39,[[],["option",4]]],[11,"move_left","","",39,[[]]],[11,"move_right","","",39,[[]]],[11,"into_ref","","",39,[[],["option",4]]],[11,"as_ref","my_algo::ch4::binary_tree::linked_binary_tree::cursor","",45,[[],["option",4]]],[11,"left","","",45,[[],["option",4]]],[11,"right","","",45,[[],["option",4]]],[11,"is_parent","","",45,[[]]],[11,"move_left","","",45,[[]]],[11,"move_right","","",45,[[]]],[11,"into_ref","","",45,[[],["option",4]]],[11,"as_ref","","",46,[[],["option",4]]],[11,"left","","",46,[[],["option",4]]],[11,"right","","",46,[[],["option",4]]],[11,"is_parent","","",46,[[]]],[11,"move_left","","",46,[[]]],[11,"move_right","","",46,[[]]],[11,"into_ref","","",46,[[],["option",4]]],[11,"as_ref","my_algo::ch4::binary_tree::vec_binary_tree::cursor","",48,[[],["option",4]]],[11,"left","","",48,[[],["option",4]]],[11,"right","","",48,[[],["option",4]]],[11,"is_parent","","",48,[[]]],[11,"move_left","","",48,[[]]],[11,"move_right","","",48,[[]]],[11,"into_ref","","",48,[[],["option",4]]],[11,"as_ref","","",49,[[],["option",4]]],[11,"left","","",49,[[],["option",4]]],[11,"right","","",49,[[],["option",4]]],[11,"is_parent","","",49,[[]]],[11,"move_left","","",49,[[]]],[11,"move_right","","",49,[[]]],[11,"into_ref","","",49,[[],["option",4]]],[11,"as_mut","my_algo::ch4::binary_tree::doubly_linked_binary_tree::cursor","",39,[[],["option",4]]],[11,"left_mut","","",39,[[],["option",4]]],[11,"right_mut","","",39,[[],["option",4]]],[11,"move_succ_and_split_mut","","",39,[[]]],[11,"insert_as_root","","",39,[[],["option",4]]],[11,"insert_as_left","","",39,[[],["option",4]]],[11,"insert_as_right","","",39,[[],["option",4]]],[11,"take","","",39,[[]]],[11,"append","","",39,[[]]],[11,"take_left","","",39,[[],["option",4]]],[11,"take_right","","",39,[[],["option",4]]],[11,"append_left","","",39,[[]]],[11,"append_right","","",39,[[]]],[11,"into_mut","","",39,[[],["option",4]]],[11,"into_inner","","",39,[[],["option",4]]],[11,"zig","","",39,[[]]],[11,"zag","","",39,[[]]],[11,"as_mut","my_algo::ch4::binary_tree::linked_binary_tree::cursor","",46,[[],["option",4]]],[11,"left_mut","","",46,[[],["option",4]]],[11,"right_mut","","",46,[[],["option",4]]],[11,"insert_as_root","","",46,[[],["option",4]]],[11,"insert_as_left","","",46,[[],["option",4]]],[11,"insert_as_right","","",46,[[],["option",4]]],[11,"move_succ_and_split_mut","","",46,[[]]],[11,"take","","",46,[[]]],[11,"take_left","","",46,[[],["option",4]]],[11,"take_right","","",46,[[],["option",4]]],[11,"append","","",46,[[]]],[11,"append_left","","",46,[[]]],[11,"append_right","","",46,[[]]],[11,"into_inner","","",46,[[],["option",4]]],[11,"into_mut","","",46,[[],["option",4]]],[11,"as_mut","my_algo::ch4::binary_tree::vec_binary_tree::cursor","",49,[[],["option",4]]],[11,"left_mut","","",49,[[],["option",4]]],[11,"right_mut","","",49,[[],["option",4]]],[11,"move_succ_and_split_mut","","",49,[[]]],[11,"insert_as_root","","",49,[[],["option",4]]],[11,"insert_as_left","","",49,[[],["option",4]]],[11,"insert_as_right","","",49,[[],["option",4]]],[11,"append","","",49,[[]]],[11,"append_left","","",49,[[]]],[11,"append_right","","",49,[[]]],[11,"take","","",49,[[]]],[11,"take_left","","",49,[[],[["option",4],["vecbinarytree",3]]]],[11,"take_right","","",49,[[],[["option",4],["vecbinarytree",3]]]],[11,"into_mut","","",49,[[],["option",4]]],[11,"into_inner","","",49,[[],["option",4]]],[11,"move_parent","my_algo::ch4::binary_tree::doubly_linked_binary_tree::cursor","",38,[[]]],[11,"parent","","",38,[[],["option",4]]],[11,"is_left_child","","",38,[[]]],[11,"move_parent","","",39,[[]]],[11,"parent","","",39,[[],["option",4]]],[11,"is_left_child","","",39,[[]]],[11,"move_parent","my_algo::ch4::binary_tree::vec_binary_tree::cursor","",48,[[]]],[11,"parent","","",48,[[],["option",4]]],[11,"is_left_child","","",48,[[]]],[11,"move_parent","","",49,[[]]],[11,"parent","","",49,[[],["option",4]]],[11,"is_left_child","","",49,[[]]],[11,"parent_mut","my_algo::ch4::binary_tree::doubly_linked_binary_tree::cursor","",39,[[],["option",4]]],[11,"parent_mut","my_algo::ch4::binary_tree::vec_binary_tree::cursor","",49,[[],["option",4]]],[11,"cursor","my_algo::ch4::binary_tree::doubly_linked_binary_tree::cursor","",38,[[]]],[11,"cursor","","",39,[[]]],[11,"cursor","my_algo::ch4::binary_tree::doubly_linked_binary_tree","",40,[[]]],[11,"cursor","my_algo::ch4::binary_tree::linked_binary_tree::cursor","",45,[[]]],[11,"cursor","","",46,[[]]],[11,"cursor","my_algo::ch4::binary_tree::linked_binary_tree","",47,[[]]],[11,"cursor","my_algo::ch4::binary_tree::vec_binary_tree::cursor","",48,[[]]],[11,"cursor","","",49,[[]]],[11,"cursor","my_algo::ch4::binary_tree::vec_binary_tree","",51,[[]]],[11,"move_parent_cursor","my_algo::ch4::binary_tree::doubly_linked_binary_tree::cursor","",38,[[]]],[11,"move_parent_cursor","","",39,[[]]],[11,"move_parent_cursor","my_algo::ch4::binary_tree::vec_binary_tree::cursor","",48,[[]]],[11,"move_parent_cursor","","",49,[[]]],[11,"cursor_mut","my_algo::ch4::binary_tree::doubly_linked_binary_tree","",40,[[]]],[11,"cursor_mut","my_algo::ch4::binary_tree::linked_binary_tree","",47,[[]]],[11,"cursor_mut","my_algo::ch4::binary_tree::vec_binary_tree","",51,[[]]],[11,"move_parent_cursor_mut","my_algo::ch4::binary_tree::doubly_linked_binary_tree","",40,[[]]],[11,"move_parent_cursor_mut","my_algo::ch4::binary_tree::vec_binary_tree","",51,[[]]],[11,"insert","my_algo::ch4::priority_queue::complete_heap","插入一个新的元素.",56,[[]]],[11,"delete_max","","删除最大元素. 若堆空则返回`None`.",56,[[],["option",4]]],[11,"len","","",56,[[]]],[11,"get_max","","",56,[[],["option",4]]],[11,"merge","","",56,[[]]],[11,"insert","my_algo::ch4::priority_queue::left_heap","",88,[[]]],[11,"merge","","",88,[[]]],[11,"len","","",88,[[]]],[11,"get_max","","",88,[[],["option",4]]],[11,"delete_max","","",88,[[],["option",4]]],[11,"push_vertex","my_algo::ch5::adjacency_list","",90,[[],["vertexindex",3]]],[11,"vertex_num","","",90,[[]]],[11,"vertexs","","",90,[[]]],[11,"edge_num","","",90,[[]]],[11,"get_vertex","","",90,[[],["option",4]]],[11,"get_vertex_mut","","",90,[[],["option",4]]],[11,"add_edge","","",90,[[],[["option",4],["result",4]]]],[11,"adj","","",90,[[]]],[11,"adj_mut","","",90,[[]]],[11,"drop","my_algo::ch2::linked_list::cdll","",3,[[]]],[11,"drop","my_algo::ch4::binary_search_tree::bt","",30,[[]]],[11,"drop","my_algo::ch4::binary_tree::doubly_linked_binary_tree","递归地释放树中包含的所有结点.",40,[[]]],[11,"drop","my_algo::vec","",65,[[]]],[11,"from","my_algo::ch2::linked_list::cdll","",3,[[["vec",3]]]],[11,"from","my_algo::ch2::linked_list::shll","",5,[[["vec",3]]]],[11,"from","my_algo::ch3::stack","",76,[[]]],[11,"from","","",77,[[]]],[11,"from","my_algo::ch4::priority_queue::complete_heap","",56,[[["myvec",3]]]],[11,"from","my_algo::ch4::priority_queue::left_heap","",88,[[["myvec",3]]]],[11,"from","my_algo::vec","",65,[[["vec",3]]]],[11,"next","my_algo::ch2::linked_list::cdll::iter","",66,[[],["option",4]]],[11,"next","","",67,[[],["option",4]]],[11,"next","my_algo::ch2::linked_list::shll","",69,[[],["option",4]]],[11,"next","","",70,[[],["option",4]]],[11,"next","my_algo::ch2::linked_list::sll","",9,[[],["option",4]]],[11,"next","my_algo::ch4::binary_search_tree::bst2","",27,[[],["option",4]]],[11,"next","my_algo::ch4::binary_search_tree::bt","",29,[[],["option",4]]],[11,"next","my_algo::ch4::binary_tree::iter","",41,[[],["option",4]]],[11,"next","","",42,[[],["option",4]]],[11,"next","","",43,[[],["option",4]]],[11,"next","","",44,[[],["option",4]]],[11,"next","my_algo::ch4::binary_tree::vec_binary_tree::iter","",50,[[],["option",4]]],[11,"next","my_algo::ch5::adjacency_list","",91,[[],["option",4]]],[11,"next","","",92,[[],["option",4]]],[11,"next","","",93,[[],["option",4]]],[11,"next","my_algo::ch5::order","",94,[[],["option",4]]],[11,"next","","",95,[[],["option",4]]],[11,"next","","",96,[[],["option",4]]],[11,"next","","",60,[[],["option",4]]],[11,"next","my_algo::ch5::path","",97,[[],["option",4]]],[11,"clone","my_algo::ch2::linked_list::cdll::cursor","",1,[[]]],[11,"clone","my_algo::ch2::linked_list::shll","",71,[[]]],[11,"clone","my_algo::ch4::binary_tree::doubly_linked_binary_tree::cursor","",38,[[]]],[11,"clone","my_algo::ch4::binary_tree::linked_binary_tree::cursor","",45,[[]]],[11,"clone","my_algo::ch4::binary_tree::vec_binary_tree::cursor","",48,[[]]],[11,"clone","my_algo::ch5::adjacency_list","",89,[[],["vertexindex",3]]],[11,"clone","my_algo::ch5::path","",97,[[]]],[11,"clone","my_algo::ch5::traits","",99,[[],["empty",3]]],[11,"default","my_algo::ch2::linked_list::cdll","",3,[[]]],[11,"default","my_algo::ch2::linked_list::shll","",5,[[]]],[11,"default","my_algo::ch2::linked_list::sll","",8,[[]]],[11,"default","my_algo::ch3::stack","",78,[[]]],[11,"default","my_algo::ch4::binary_search_tree::llrbt","",79,[[]]],[11,"default","my_algo::ch4::binary_search_tree::bst2","",80,[[]]],[11,"default","my_algo::ch4::binary_search_tree::rbt","",28,[[]]],[11,"default","my_algo::ch4::binary_search_tree::bt","",30,[[]]],[11,"default","my_algo::ch4::binary_search_tree::st","",82,[[]]],[11,"default","my_algo::ch4::binary_search_tree::avlt","",84,[[]]],[11,"default","my_algo::ch4::binary_search_tree::bst","",85,[[]]],[11,"default","my_algo::ch4::binary_tree::doubly_linked_binary_tree","",40,[[]]],[11,"default","my_algo::ch4::binary_tree::linked_binary_tree","",47,[[]]],[11,"default","my_algo::ch4::binary_tree::vec_binary_tree","",51,[[]]],[11,"default","my_algo::ch4::priority_queue::complete_heap","",56,[[]]],[11,"default","my_algo::ch4::priority_queue::left_heap","",88,[[]]],[11,"default","my_algo::ch5::adjacency_list","",90,[[]]],[11,"default","my_algo::ch5::path","",97,[[]]],[11,"default","my_algo::ch5::traits","",98,[[],["marked",3]]],[11,"default","","",99,[[],["empty",3]]],[11,"default","my_algo::vec","",65,[[]]],[11,"cmp","my_algo::ch4::binary_search_tree","",26,[[],["ordering",4]]],[11,"eq","my_algo::ch2::linked_list::cdll","",3,[[]]],[11,"eq","","",3,[[["vec",3]]]],[11,"eq","my_algo::ch2::linked_list::shll","",5,[[["vec",3]]]],[11,"eq","my_algo::ch4::binary_search_tree","",26,[[]]],[11,"eq","my_algo::ch4::binary_tree::coding_tree","",86,[[["huffmanchar",3]]]],[11,"eq","my_algo::ch4::binary_tree::doubly_linked_binary_tree","",40,[[]]],[11,"eq","my_algo::ch4::binary_tree::linked_binary_tree","",47,[[]]],[11,"eq","my_algo::ch4::binary_tree::vec_binary_tree","",51,[[]]],[11,"eq","my_algo::ch4::priority_queue::left_heap","",87,[[["leftnode",3]]]],[11,"ne","","",87,[[["leftnode",3]]]],[11,"eq","my_algo::ch5::adjacency_list","",89,[[["vertexindex",3]]]],[11,"ne","","",89,[[["vertexindex",3]]]],[11,"partial_cmp","my_algo::ch4::binary_search_tree","",26,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","my_algo::ch4::binary_tree::coding_tree","",86,[[["huffmanchar",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","my_algo::ch4::binary_tree::doubly_linked_binary_tree","",40,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","my_algo::ch4::binary_tree::linked_binary_tree","",47,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","my_algo::ch4::binary_tree::vec_binary_tree","",51,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","my_algo::ch4::priority_queue::left_heap","",87,[[["leftnode",3]],[["ordering",4],["option",4]]]],[11,"lt","","",87,[[["leftnode",3]]]],[11,"le","","",87,[[["leftnode",3]]]],[11,"gt","","",87,[[["leftnode",3]]]],[11,"ge","","",87,[[["leftnode",3]]]],[11,"deref","my_algo::ch4::binary_search_tree::rbt","",81,[[]]],[11,"deref","my_algo::ch4::binary_search_tree::avlt","",83,[[]]],[11,"deref","my_algo::vec","",65,[[]]],[11,"deref_mut","my_algo::ch4::binary_search_tree::rbt","",81,[[]]],[11,"deref_mut","my_algo::ch4::binary_search_tree::avlt","",83,[[]]],[11,"deref_mut","my_algo::vec","",65,[[]]],[11,"fmt","my_algo::ch2::linked_list::cdll::cursor","",1,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::ch2::linked_list::cdll","",3,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::ch2::linked_list::shll","",68,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",71,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::ch2::list","",73,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::ch2::slice","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",18,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::ch3","",19,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::ch4::binary_search_tree::rbt","",81,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::ch4::binary_search_tree::avlt","",83,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::ch4::binary_search_tree","",26,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::ch4::priority_queue::left_heap","",87,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::ch5::adjacency_list","",89,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::ch5::traits","",98,[[["formatter",3]],["result",6]]],[11,"fmt","","",99,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::vec","",65,[[["formatter",3]],["result",6]]],[11,"fmt","my_algo::ch3","",19,[[["formatter",3]],["result",6]]],[11,"hash","my_algo::ch5::adjacency_list","",89,[[]]]],"p":[[8,"ISizeListExt"],[3,"Cursor"],[3,"CursorMut"],[3,"LinkedList"],[4,"Node"],[3,"LinkedList"],[8,"SinglyLinkedListExt"],[3,"Node"],[3,"LinkedList"],[3,"CursorMut"],[8,"LinearCursor"],[8,"LinearCursorMut"],[8,"SinglyLinkedList"],[8,"List"],[8,"ListExt"],[8,"PartialEqListExt"],[8,"PartialOrdListExt"],[3,"Slice"],[3,"SliceMut"],[4,"Error"],[8,"Queue"],[8,"QueueExt"],[3,"CircularQueue"],[8,"Stack"],[8,"StackExt"],[3,"SharedStack"],[3,"Entry"],[3,"Iter"],[3,"RBTreeMap"],[3,"Iter"],[3,"BTreeMap"],[8,"Map"],[3,"HuffmanCodingTree"],[8,"BinTreeCursor"],[8,"BinTreeCursorMut"],[8,"MoveParentCursor"],[8,"MoveParentCursorMut"],[8,"BinTreeCursorExt"],[3,"Cursor"],[3,"CursorMut"],[3,"DoublyLinkedBinaryTree"],[3,"InOrderIter"],[3,"PreOrderIter"],[3,"MidOrderIter"],[3,"PostOrderIter"],[3,"Cursor"],[3,"CursorMut"],[3,"LinkedBinaryTree"],[3,"Cursor"],[3,"CursorMut"],[3,"InOrderIter"],[3,"VecBinaryTree"],[8,"BinTree"],[8,"MoveParentBinTree"],[8,"BinTreeMut"],[8,"MoveParentBinTreeMut"],[3,"CompleteMaxHeap"],[8,"PriorityQueue"],[3,"Cycle"],[3,"DepthFirstOrder"],[3,"Topological"],[3,"DepthFirstPaths"],[3,"BreadthFirstPaths"],[3,"KosarajuSCC"],[8,"Graph"],[3,"MyVec"],[3,"Iter"],[3,"IterMut"],[3,"ItemNode"],[3,"IterMut"],[3,"Iter"],[3,"Cursor"],[3,"CursorMut"],[3,"IndexError"],[3,"LeftStack"],[3,"RightStack"],[3,"SliceStack"],[3,"DefaultSliceStack"],[3,"DoubleStack"],[3,"RBTreeMap"],[3,"TreeMap"],[3,"RBNode"],[3,"SplayTreeMap"],[3,"AVLNode"],[3,"AVLTreeMap"],[3,"TreeMap"],[3,"HuffmanChar"],[3,"LeftNode"],[3,"LeftHeap"],[3,"VertexIndex"],[3,"LinkedGraph"],[3,"VIter"],[3,"Iter"],[3,"IterMut"],[3,"PreOrderIter"],[3,"PostOrderIter"],[3,"ReversePostOrderIter"],[3,"Path"],[3,"Marked"],[3,"Empty"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);