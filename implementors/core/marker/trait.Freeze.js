(function() {var implementors = {};
implementors["my_algo"] = [{"text":"impl&lt;T&gt; Freeze for LinkedList&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Cursor&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CursorMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ItemNode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LinkedList&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Cursor&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CursorMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Node&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Node&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LinkedList&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CursorMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexError","synthetic":true,"types":[]},{"text":"impl&lt;'a, L, Item&gt; Freeze for Slice&lt;'a, L, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, L, Item&gt; Freeze for SliceMut&lt;'a, L, Item&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CircularQueue&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SharedStack&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for LeftStack&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for RightStack&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for SliceStack&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for DefaultSliceStack&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for DoubleStack&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for Entry&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for RBTreeMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for TreeMap&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for RBNode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tree, K, V&gt; Freeze for RBTreeMap&lt;Tree, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tree: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, const M:&nbsp;usize&gt; Freeze for BTreeMap&lt;K, V, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, const M:&nbsp;usize&gt; Freeze for Iter&lt;'a, K, V, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Tree, K, V&gt; Freeze for SplayTreeMap&lt;Tree, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tree: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AVLNode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tree, K, V&gt; Freeze for AVLTreeMap&lt;Tree, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tree: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tree, K, V&gt; Freeze for TreeMap&lt;Tree, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tree: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for HuffmanChar","synthetic":true,"types":[]},{"text":"impl&lt;Tree&gt; Freeze for HuffmanCodingTree&lt;Tree&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tree: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for DoublyLinkedBinaryTree&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Cursor&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CursorMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Cursor&gt; Freeze for InOrderIter&lt;'a, Cursor&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Cursor&gt; Freeze for PreOrderIter&lt;'a, Cursor&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Cursor: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Cursor&gt; Freeze for MidOrderIter&lt;'a, Cursor&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Cursor: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Cursor&gt; Freeze for PostOrderIter&lt;'a, Cursor&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LinkedBinaryTree&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Cursor&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CursorMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for VecBinaryTree&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Cursor&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CursorMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for InOrderIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for CompleteMaxHeap&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LeftNode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LeftHeap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for VertexIndex","synthetic":true,"types":[]},{"text":"impl&lt;V, E&gt; Freeze for LinkedGraph&lt;V, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, V, E&gt; Freeze for VIter&lt;'a, V, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for Iter&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for IterMut&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for Cycle&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for DepthFirstOrder&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for PreOrderIter&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for PostOrderIter&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for ReversePostOrderIter&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, G&gt; Freeze for Topological&lt;'a, G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for Path&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for DepthFirstPaths&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as Graph&gt;::VertexKey: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for BreadthFirstPaths&lt;G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;G as Graph&gt;::VertexKey: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G&gt; Freeze for KosarajuSCC&lt;G&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Marked","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MyVec&lt;T&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()